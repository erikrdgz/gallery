{"version":3,"sources":["components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["unsplash","Unsplash","accessKey","secret","Gallery","state","images","search","photos","then","toJson","data","console","log","setState","results","catch","err","this","className","map","image","key","id","src","urls","regular","alt","alt_description","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAKMA,EAAW,I,OAAIC,GAAS,CAC1BC,UAAW,mEACXC,OAAQ,qEAyCGC,E,YAnCX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CAACC,OAAQ,IAFb,E,iFAKQ,IAAD,OAChBN,EAASO,OAAOC,OAAO,UAAW,EAAG,IACpCC,KAAKC,UACLD,MAAK,SAAAE,GACFC,QAAQC,IAAI,gBACZ,EAAKC,SAAS,CAAER,OAAQK,EAAKI,aAEtCC,OAAM,SAAAC,GACNL,QAAQC,IAAI,kCAAmCI,Q,+BAQ1C,IAAMX,EAAUY,KAAKb,MAAMC,OAE3B,OADAM,QAAQC,IAAIP,GAER,yBAAKa,UAAU,WACZb,EAAOc,KAAK,SAAAC,GAAK,OAChB,yBAAKF,UAAU,OAAOG,IAAKD,EAAME,IAC7B,yBAAKC,IAAKH,EAAMI,KAAKC,QAASC,IAAKrB,EAAOsB,2B,GA7BxCC,IAAMC,WCObC,E,iLAZX,OACE,yBAAKZ,UAAU,uBACb,yBAAKA,UAAU,QACf,qDACA,iFAEA,kBAAC,EAAD,W,GARUU,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.52fdedbf.chunk.js","sourcesContent":["import React from 'react';\nimport \"../App.css\";\n\nimport Unsplash, { toJson } from 'unsplash-js'\n\nconst unsplash = new Unsplash({\n    accessKey: \"8d03670f0440e759f71263ae254c0daf35b2029a75914bf99fe0d90f5e74472b\",\n    secret: \"2179a72826ca75edc25df89c7deb20ec1c10de8bc935605cf1361a2f5cc6a062\"\n});\n\n\nclass Gallery extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {images: []}\n    }\n\n    componentDidMount() {\n        unsplash.search.photos(\"product\", 1, 20)\n        .then(toJson)\n        .then(data => {\n            console.log(\"data fetched\")\n            this.setState({ images: data.results });\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log('Error happened during fetching!', err);\n\t\t});\n\n    }\n\n\n\n    render() {\n        const images =  this.state.images;\n        console.log(images);\n        return (\n            <div className=\"masonry\">\n              {images.map( image => (\n                <div className=\"item\" key={image.id}>\n                    <img src={image.urls.regular} alt={images.alt_description}/>\n                </div>\n              ))}\n            </div>\n          )\n    }\n}\n\nexport default Gallery","import React from 'react';\nimport './App.css';\nimport Gallery from './components/Gallery';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"text-center wrapper\">\n        <div className=\"mb-3\">\n        <h1 >Unsplash Masonry Grid</h1>\n        <p>A React App that fetches images from Unsplash API</p>\n        </div> \n        <Gallery/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}